generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  firstName        String
  lastName         String
  email            String        @unique
  phone            String        @unique
  password         String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  isArchived       Boolean       @default(false)
  isVerified       Boolean       @default(false)
  receivedMessages Message[]
  sentMessages     Message[]     @relation("Sender")
  otp              Otp?
  profile          Profile?
  likes            Like[]        @relation("Liker")
  settings         UserSettings?
}

model Profile {
  id             String           @id @default(cuid())
  userId         String           @unique
  hobbies        Hobby[]
  bio            String?
  gender         Gender?
  dateOfBirth    DateTime?
  profilePicture String?
  about          String?
  premium        Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  basicInfo      BasicInfo?
  location       Location?
  matches1       Match[]          @relation("Match1")
  matches2       Match[]          @relation("Match2")
  matches        String[]
  gallery        Photo[]
  user           User             @relation(fields: [userId], references: [id])
  preferences    UserPreferences?
  likedBy        Like[]           @relation("LikedProfile")
}

model Like {
  id           String   @id @default(cuid())
  userId       String
  profileId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation("Liker", fields: [userId], references: [id])
  likedProfile Profile  @relation("LikedProfile", fields: [profileId], references: [id])
}

model BasicInfo {
  id                 String          @id @default(cuid())
  userId             String          @unique
  height             Int
  language           Language
  relationshipStatus Status
  children           Boolean
  religion           Religion
  zodiac             Zodiac
  alcohol            Boolean
  PersonalityType    PersonalityType
  user               Profile         @relation(fields: [userId], references: [id])
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  darkMode      Boolean? @default(false)
  twoFactorAuth Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id])
}

model AppSettings {
  id            String   @id @default(cuid())
  termsOfUse    String?
  privacyPolicy String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Otp {
  id        String   @id @default(cuid())
  userId    String   @unique
  secret    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Photo {
  id        String   @id @default(cuid())
  userId    String
  publicId  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Profile  @relation(fields: [userId], references: [id])
}

model Location {
  id        String  @id @default(cuid())
  userId    String  @unique
  latitude  Float?
  longitude Float?
  address   String?
  city      String?
  state     String?
  country   String?
  range     Int?
  user      Profile @relation(fields: [userId], references: [id])
}

model Match {
  id         String    @id @default(cuid())
  profile1Id String
  profile2Id String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user1      Profile   @relation("Match1", fields: [profile1Id], references: [id])
  user2      Profile   @relation("Match2", fields: [profile2Id], references: [id])
  status     MatchType
}

model Message {
  id        String   @id @default(cuid())
  senderId  String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  receiver  User[]
  sender    User     @relation("Sender", fields: [senderId], references: [id])
}

model UserPreferences {
  id            String   @id @default(cuid())
  userId        String   @unique
  notifications Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          Profile  @relation(fields: [userId], references: [id])
}

enum MatchType {
  AUTOMATCH
  MANUALMATCH
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
enum Hobby {
  SPORTS
  MUSIC
  ART
  YOGA
  KARAOKE
  TENNIS
  RUN
  SWIM
  EXTREME
  VIDEOGAMING
  TRAVEL
  FOOD
  MOVIES
  GAMES
  READING
  WRITING
  DANCING
  SHOPPING
  COOKING
  PHOTOGRAPHY
  CARS
  FASHION
  TECHNOLOGY
  POLITICS
  RELIGION
  CRAFTS
  DRINK
  GARDENING
  ANIMALS
  NATURE
  FITNESS
  HEALTH
  EDUCATION
  BUSINESS
  FINANCE
  SCIENCE
  HISTORY
  CULTURE
  LANGUAGES
  OTHER
}

enum Status {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
  OTHER
}

enum Language {
  ENGLISH
  SPANISH
  FRENCH
  GERMAN
  ITALIAN
  PORTUGUESE
  RUSSIAN
  CHINESE
  JAPANESE
  KOREAN
  ARABIC
  HINDI
  BENGALI
  URDU
  PUNJABI
  TAMIL
  TELUGU
  MARATHI
  GUJARATI
  KANNADA
  MALAYALAM
  OTHER
}

enum Religion {
  CHRISTIANITY
  ISLAM
  HINDUISM
  BUDDHISM
  JUDAISM
  SIKHISM
  OTHER
}

enum Zodiac {
  ARIES
  TAURUS
  GEMINI
  CANCER
  LEO
  VIRGO
  LIBRA
  SCORPIO
  SAGITTARIUS
  CAPRICORN
  AQUARIUS
  PISCES
}

enum PersonalityType {
  INTJ
  INTP
  ENTJ
  ENTP
  INFJ
  INFP
  ENFJ
  ENFP
  ISTJ
  ISFJ
  ESTJ
  ESFJ
  ISTP
  ISFP
  ESTP
  ESFP
}
